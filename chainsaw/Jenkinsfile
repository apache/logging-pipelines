#!groovy
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

pipeline {
    options {
        ansiColor 'xterm'
        buildDiscarder logRotator(numToKeepStr: '25')
        timeout time: 1, unit: 'HOURS'
    }
    agent {
        label 'ubuntu'
    }
    libraries {
        lib 'logging'
    }
    tools {
        jdk 'jdk_11_latest'
        maven 'maven_3_latest'
    }
    stages {
        stage('Build') {
            steps {
                cancelPreviousRunningBuilds()
                sh '''
                mvn -Pdevelopment site:site
                mvn -Pdevelopment install
                '''
            }
            post {
                always {
                    junit '**/target/*-reports/*.xml'
                }
            }
        }
        stage('Deploy') {
            when {
                allOf {
                    branch 'master'
                    expression { sh(returnStdout: true, script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout').endsWith('-SNAPSHOT') }
                }
            }
            steps {
                sh 'mvn -Pdevelopment -DskipTests deploy'
            }
            post {
                fixed {
                    notifyBuildFixed()
                }
                unstable {
                    notifyBuildUnstable()
                }
                failure {
                    notifyBuildFailed()
                }
            }
        }
    }
}

